@using TXTextControl.Web.MVC

<h1>Editor and Viewer Side-by-Side Sample</h1>

<div class="row">
    <div class="col-md-6">
        <div style="height: 600px;">

            <h2>Editor</h2>

            @Html.TXTextControl().TextControl(settings =>
            {
                settings.Dock = TXTextControl.Web.DockStyle.Fill;
            }).LoadDataFromJson(File.ReadAllText("data.json")).Render()

        </div>
    </div>
    <div class="col-md-6">

        <h2>Viewer</h2>

        <div style="height: 600px;">
            @{
                var settings = new TXTextControl.Web.MVC.DocumentViewer.DocumentViewerSettings();
                settings.Dock = TXTextControl.Web.MVC.DocumentViewer.DocumentViewerSettings.DockStyle.Fill;
                settings.ShowThumbnailPane = false;
            
                var viewer = new TXTextControl.Web.MVC.DocumentViewer.DocumentViewer(settings);
                @viewer.Render()
            }
        </div>

    </div>
</div>

<div class="row">
    <div class="col-md-12 mt-2">
        <button onclick="mergeTemplate()" class="btn btn-primary">Manual Preview</button>
    </div>
</div>

@section Scripts {
    <script>

        window.addEventListener("documentViewerLoaded", function () {
            document.querySelector("tx-document-viewer").shadowRoot.styleSheets[0].addRule("#progressBar", "display: none !important");
            document.querySelector("tx-document-viewer").shadowRoot.styleSheets[0].addRule(".tx-toolbar-disabled", "opacity: 1 !important");
        });


        TXTextControl.addEventListener("textControlLoaded", e => {
            let idleTimeout;

            function onIdle() {
                mergeTemplate();
            }

            function resetIdleTimer() {
                clearTimeout(idleTimeout);
                idleTimeout = setTimeout(onIdle, 2000); // Set idle time to 2 seconds
            }

            // Attach event listener to TXTextControl's "changed" event
            TXTextControl.addEventListener("changed", e => {
                resetIdleTimer();
            });

            // Initialize the idle timer
            resetIdleTimer();
        });

        function mergeTemplate() {
            TXTextControl.saveDocument(TXTextControl.StreamType.InternalUnicodeFormat, document => {
                // call web api endpoint with ajax
                $.ajax({
                    url: '/mailmerge/merge',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(document.data),
                    success: function (data) {
                        // load the document into the viewer
                        TXDocumentViewer.loadDocument(data);
                    }
                });
            })
        }
    </script>
}
